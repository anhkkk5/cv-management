import React, { useState, useEffect } from "react";
import { useSearchParams } from "react-router-dom";
import { getAlljob } from "../../services/jobServices/jobServices"; // Import service ƒë·ªÉ l·∫•y danh s√°ch job
import { getLocation } from "../../services/getAllLocation/locationServices"; // Import service ƒë·ªÉ l·∫•y danh s√°ch location
import { getAllCompany } from "../../services/getAllCompany/companyServices"; // Import service ƒë·ªÉ l·∫•y danh s√°ch company
import { Tag } from "antd";
import SearchList from "../search/searchList";

/**
 * Component Search - Trang t√¨m ki·∫øm c√¥ng vi·ªác
 *
 * Ch·ª©c nƒÉng ch√≠nh:
 * - ƒê·ªçc query parameters t·ª´ URL (city, keyword)
 * - Fetch t·∫•t c·∫£ jobs t·ª´ API
 * - L·ªçc jobs theo ƒëi·ªÅu ki·ªán search
 * - Hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm
 *
 * URL example: /search?city=Hanoi&keyword=react
 */
function Search() {
  // Hook ƒë·ªÉ ƒë·ªçc query parameters t·ª´ URL
  // VD: /search?city=Hanoi&keyword=react
  const [searchParams] = useSearchParams();

  // State l∆∞u tr·ªØ danh s√°ch jobs ƒë√£ ƒë∆∞·ª£c filter
  const [data, setData] = useState([]);

  // L·∫•y gi√° tr·ªã city t·ª´ URL parameter
  // N·∫øu kh√¥ng c√≥ th√¨ default l√† chu·ªói r·ªóng
  const citySearch = searchParams.get("city") || "";

  // L·∫•y gi√° tr·ªã keyword t·ª´ URL parameter
  // N·∫øu kh√¥ng c√≥ th√¨ default l√† chu·ªói r·ªóng
  const keywordSearch = searchParams.get("keyword") || "";

  // useEffect ch·∫°y khi component mount ho·∫∑c khi search parameters thay ƒë·ªïi
  useEffect(() => {
    /**
     * H√†m async ƒë·ªÉ fetch v√† filter data
     */
    const fetchApi = async () => {
      try {
        // G·ªçi API ƒë·ªÉ l·∫•y t·∫•t c·∫£ jobs, locations v√† companies
        const [jobs, locations, companies] = await Promise.all([
          getAlljob(),
          getLocation(),
          getAllCompany()
        ]);

        if (jobs && locations && companies) {
          // Filter jobs theo ƒëi·ªÅu ki·ªán search
          const newData = jobs.filter((item) => {
            // ‚úÖ Ki·ªÉm tra ƒëi·ªÅu ki·ªán city
            // N·∫øu c√≥ citySearch, t√¨m location_id t∆∞∆°ng ·ª©ng v·ªõi t√™n th√†nh ph·ªë
            let cityMatch = true;
            if (citySearch) {
              // T√¨m location c√≥ t√™n kh·ªõp v·ªõi citySearch
              const location = locations.find(loc => 
                loc.name?.toLowerCase().includes(citySearch.toLowerCase()) ||
                loc.city?.toLowerCase().includes(citySearch.toLowerCase())
              );
              
              // N·∫øu t√¨m th·∫•y location, check xem job c√≥ location_id kh·ªõp kh√¥ng
              if (location) {
                cityMatch = item.location_id === location.id;
              } else {
                // N·∫øu kh√¥ng t√¨m th·∫•y location, th·ª≠ so s√°nh tr·ª±c ti·∫øp v·ªõi location_id
                cityMatch = item.location_id?.toLowerCase().includes(citySearch.toLowerCase());
              }
            }

            // ‚úÖ Ki·ªÉm tra ƒëi·ªÅu ki·ªán keyword
            // T√¨m keyword trong title, description, jobLevel, type V√Ä t√™n c√¥ng ty
            // Normalize: lo·∫°i b·ªè kho·∫£ng tr·∫Øng v√† chuy·ªÉn v·ªÅ lowercase ƒë·ªÉ t√¨m ki·∫øm linh ho·∫°t
            const keyword = keywordSearch
              ? (() => {
                  const normalizedKeyword = keywordSearch.toLowerCase().replace(/\s+/g, '');
                  const normalizedTitle = item.title?.toLowerCase().replace(/\s+/g, '') || '';
                  const normalizedDesc = item.description?.toLowerCase().replace(/\s+/g, '') || '';
                  const normalizedLevel = item.jobLevel?.toLowerCase().replace(/\s+/g, '') || '';
                  const normalizedType = item.type?.toLowerCase().replace(/\s+/g, '') || '';
                  
                  // T√¨m company t∆∞∆°ng ·ª©ng v·ªõi job
                  const company = companies.find(comp => comp.id === item.company_id);
                  const normalizedCompanyName = (company?.companyName || company?.name || '').toLowerCase().replace(/\s+/g, '');
                  
                  return (
                    normalizedTitle.includes(normalizedKeyword) ||
                    normalizedDesc.includes(normalizedKeyword) ||
                    normalizedLevel.includes(normalizedKeyword) ||
                    normalizedType.includes(normalizedKeyword) ||
                    normalizedCompanyName.includes(normalizedKeyword)
                  );
                })()
              : true;

            // Tr·∫£ v·ªÅ job ch·ªâ khi t·∫•t c·∫£ ƒëi·ªÅu ki·ªán ƒë·ªÅu th·ªèa m√£n
            return cityMatch && keyword;
          });

          // ‚úÖ Reverse array ƒë·ªÉ hi·ªÉn th·ªã jobs m·ªõi nh·∫•t tr∆∞·ªõc
          // C·∫≠p nh·∫≠t state v·ªõi data ƒë√£ ƒë∆∞·ª£c filter v√† reverse
          setData(newData.reverse());
        }
      } catch (error) {
        console.error("Error fetching jobs:", error);
        // C√≥ th·ªÉ th√™m error handling ·ªü ƒë√¢y
      }
    };

    // G·ªçi h√†m fetch
    fetchApi();
  }, [citySearch, keywordSearch]); // ‚úÖ Dependencies: ch·∫°y l·∫°i khi search params thay ƒë·ªïi

  return (
    <>
      {/* Search Results Header - Hi·ªÉn th·ªã ti√™u ƒë·ªÅ v√† c√°c tag t√¨m ki·∫øm */}
      <div>
        <strong>K·∫øt qu·∫£ t√¨m ki·∫øm</strong>

        {/* Hi·ªÉn th·ªã tag city n·∫øu c√≥ search theo city */}
        {citySearch && (
          <Tag color="blue" style={{ marginLeft: "8px" }}>
            üìç {citySearch}
          </Tag>
        )}

        {/* Hi·ªÉn th·ªã tag keyword n·∫øu c√≥ search theo keyword */}
        {keywordSearch && (
          <Tag color="green" style={{ marginLeft: "8px" }}>
            üîç {keywordSearch}
          </Tag>
        )}
      </div>

      {/* Search Results List - Hi·ªÉn th·ªã danh s√°ch k·∫øt qu·∫£ */}
      {/* Ch·ªâ render SearchList khi c√≥ data */}
      {data && data.length > 0 && <SearchList data={data} />}

      {/* C√≥ th·ªÉ th√™m empty state khi kh√¥ng c√≥ k·∫øt qu·∫£ */}
      {data && data.length === 0 && (
        <div style={{ textAlign: "center", padding: "40px" }}>
          <p>Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác ph√π h·ª£p v·ªõi t·ª´ kh√≥a t√¨m ki·∫øm</p>
        </div>
      )}
    </>
  );
}

export default Search;

/**
 * üí° GI·∫¢I TH√çCH LOGIC FILTER:
 *
 * 1. CITY FILTER:
 *    - Fetch danh s√°ch Locations ƒë·ªÉ map t√™n th√†nh ph·ªë v·ªõi location_id
 *    - N·∫øu c√≥ citySearch: t√¨m location c√≥ t√™n kh·ªõp (H√† N·ªôi ‚Üí LOC001)
 *    - So s√°nh job.location_id v·ªõi location.id t√¨m ƒë∆∞·ª£c
 *    - N·∫øu kh√¥ng t√¨m th·∫•y location, th·ª≠ so s√°nh tr·ª±c ti·∫øp v·ªõi location_id
 *    - N·∫øu kh√¥ng c√≥ citySearch: b·ªè qua (return true)
 *
 * 2. KEYWORD FILTER:
 *    - Fetch danh s√°ch Companies ƒë·ªÉ t√¨m ki·∫øm theo t√™n c√¥ng ty
 *    - Normalize keyword v√† fields: lo·∫°i b·ªè kho·∫£ng tr·∫Øng, chuy·ªÉn lowercase
 *    - "Full stack" ‚Üí "fullstack", "Fullstack Developer" ‚Üí "fullstackdeveloper"
 *    - T√¨m trong: title, description, jobLevel, type, V√Ä t√™n c√¥ng ty (case-insensitive, space-insensitive)
 *    - N·∫øu kh√¥ng c√≥ keywordSearch: b·ªè qua (return true)
 *
 * 3. K·∫æT QU·ª¢:
 *    - Job ƒë∆∞·ª£c hi·ªÉn th·ªã khi: cityMatch && keyword = true
 *    - Array ƒë∆∞·ª£c reverse ƒë·ªÉ hi·ªÉn th·ªã jobs m·ªõi nh·∫•t tr∆∞·ªõc
 *
 * üìù V√ç D·ª§:
 * URL: /search?city=H√† N·ªôi&keyword=fpt
 *
 * - citySearch = "H√† N·ªôi" ‚Üí t√¨m location c√≥ name="H√† N·ªôi" ‚Üí location.id="LOC001"
 * - keywordSearch = "fpt"
 * - Filter: jobs c√≥ location_id="LOC001" v√† (title/description/companyName ch·ª©a "fpt")
 * - K·∫øt qu·∫£: Hi·ªÉn th·ªã t·∫•t c·∫£ jobs c·ªßa FPT Software t·∫°i H√† N·ªôi
 */
